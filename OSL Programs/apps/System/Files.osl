import as "window_tools"
import as "glass" from "packages"

permission "request" "file admin"

file "use_type" "folder"

save "files@system" "set_directory"

window "dimensions" 1000 600
window "show"

files_path = "Origin/(C) Users/" ++ username
user_path = files_path ++ "/"

hidden = []
tabs = []
current_tab = 1
input_path = files_path.destr
files = []
selected_files = []
drag_id = 0

sorting_mode = "name"
sorting_dir = "descending"

dta = ""
can = true
def "navigate" "path" (
  tab_data = {}
  tab_data.title = path.split("/").last()
  tab_data.url = path
  tab_data.icon = file_types[".folder"][1]
  
  tabs[current_tab].url = path
  pos = tabs[current_tab].position + 1
  tabs[current_tab].position = pos
  tabs[current_tab].history = tabs[current_tab].history.trim(1,pos - 1).append(tab_data)
  input_path = path
)

def sort_files(files) (
  new_files = []
  each i file files (
    obj = {}
    
    file "open" file "onlyaccess"
    obj.uuid = file
    
    local filetype = fileGet(1)
    obj.name = fileGet(2) ++ filetype
  
    obj.modified = timestamp - fileGet(10)
    
    local filetype = file_types[filetype][2]
    obj.filetype = filetype == "" ? "Document" filetype
    if filetype == "Folder" (
      obj.size = fileGet(4).len
    ) else (
      obj.size = fileGet(12).toNum()
    )
    new_files.append(obj)
  )
  return new_files.sortBy(sorting_mode.toLower(), sorting_direction).getKeys("uuid")
)

def "refresh" (
  cur = tabs[current_tab]
  input_path = cur.history[cur.position].url
)

def "setup_tabs" (
  cur_tab = {}
  cur_tab.history = []
  cur_tab.position = 0
  cur_tab.input = user_folder
  
  tabs = [].append(cur_tab)
  current_tab = 1
)

setup_tabs

if passed_data != "" (
  file "open" passed_data "onlyaccess"
  path = fileGet(3)
  navigate path ++ "/" ++ fileGet(2)
) else (
  navigate user_folder
)

def "folder" "txt" (
  local con = hidden.contains(txt)
  loc 2 2 125 y
  square 225 20 15 0 1
  if mouse_touching (
    if onclick (
      if con (
        hidden.delete(txt)
      ) else (
        hidden.append(txt)
      )
    )
    square 225 20 15 : c#seco
    square 225 20 10 : c#prim
  )
  change_x 100
  c txtc
  icon con ? "right" "down" 0.6
  change_x -210
  text txt.str 9
  y -= 35
)

def "file_folder" "txt, folder" (
  file "open" txt ++ ".folder" "onlyaccess"
  
  if hidden.contains(folder).not() (
    loc 2 2 125 y
    square 225 20 10 0 1
    if mouse_touching (
      if onclick (
        navigate fileGet(3) ++ "/" ++ fileGet(2)
      )
      square 225 20 15 : c#seco
      square 225 20 10 : c#prim
      local idx = favorites.index(txt)
      
      local down = {"Down": def(path) -> (
        local idx = favorites.index(path)
        favorites.swap(idx, idx + 1)
        saveFavorites()
      )}
      local up = {"Up": def(path) -> (
        local idx = favorites.index(path)
        favorites.swap(idx, idx - 1)
        saveFavorites()
      )}
      
      local move = ["Move Pin"]
      if idx > 1 (
        local move = move.append(up)
      )
      if idx < favorites.len (
        local move = move.append(down)
      )
      
      rightclick [
        "> " ++ fileGet(14),
        "-",
        {"Open In New Window": def(val) -> (
          if val.startsWith("user/") (
            local val = user_folder ++ val.trim(5, -1) ++ ".folder"
          )
          window.create(window.file.uuid, {passed_data: val})
        )},
        "-",
        move,
        {"Unpin": def(path) -> (
          favorites.delete(path)
          saveFavorites()
        )}
      ] txt
      
      if file_dropped != 0 (
        file "open" file_dropped "onlyaccess"
        if fileGet(1) == ".folder" (
          favorites.insert(idx, fileGet(3) ++ "/" ++ fileGet(2))
          saveFavorites()
        )
        
        file_dropped = 0
      )
    )
    
    change_x -95
    stretch [100,100]
    file "render" 1
    c txtc : chx#30
    text fileGet(2) 8
    y -= 35
  )
)

def "render_tabs" (
  offset = 55
  total_width = window.width - 190
  positions = tabs.getKeys("position")
  width = total_width / tabs.len - 20
  width.clamp(0,300)
  width2 = width + 20
  hs 1
  for count tabs.len (
    temp = positions[count]
    cur = tabs[count].history[temp]
    temp = 10 - offset
    loc 2 2 count - 0.5 * width2 - temp -22
    if count == current_tab (
      square width - 20 0 5 : c#seco chy#-20
      square width 25 15 : c#prim chy#20
    ) else (
      square width 25 15 : c#prim
      if onclick (
        current_tab = count
        refresh
      )
    )
    loc 2 2 count - 1 * width2 - temp + 20 -22.5
    icon cur.icon 0.8 : c#txtc
    text cur.title 8 : c#txtc chx#20
    if tabs.len > 1 (
      loc 2 2 count * width2 - temp - 20 -22.5
      square 20 20 0 0 1
      if onclick (
        tabs.delete(count)
        if count > 1 "current_tab --"
        refresh
      )
      icon "close" 0.5
    )
  )
  loc 2 2 22.5 -22.5
  square 25 25 15 : c#prim
  if tabs.len < 10 "c txtc" else "c seco"
  icon "add" 0.55
  if onclick and tabs.len < 10 (
    tab_data = {}
    tab_data.icon = file_types[".folder"][1]
    tab_data.title = username
    tab_data.url = user_folder
    
    cur_tab = {}
    cur_tab.history = [].append(tab_data)
    cur_tab.position = 1
    cur_tab.input = user_folder
    
    tabs.append(cur_tab)
    current_tab = tabs.len
    refresh
  )
)

def "sorting_option" "sort_name" (
  text sort_name 8
  if sorting_mode == sort_name (
    if onclick (
      if sorting_direction == "ascending" (
        sorting_direction = "descending"
      ) else (
        sorting_direction = "ascending"
      )
    )
    icon sorting_direction == "ascending" ? "up" "down" 0.4 : chx#20
  ) else (
    if onclick (
      sorting_mode = sort_name
      sorting_direction = "ascending"
    )
  )
)

def "render_files" (
  if window.width > 700 (
    loc 2 2 260 -160
  ) else (
    loc 2 2 5 -160
  )
  local temp_x = x_position
  local temp_y = y_position
  loc -2 -2 0 32
  if window.width > 1000 and selected_files.len != 0 (
    change_x -292
  )
  local temp_x2 = x_position
  local temp_y2 = y_position
  
  frame temp_x temp_y temp_x2 temp_y2 files.len * 45 : c#prim
  current_folder_uuid = ""
  window.drop_location = null
  if input_path == "origin" (
    files = []
  ) else (
    file "exists" input_path ++ ".folder"
    if exists (
      file "open" input_path ++ ".folder" "onlyaccess"
      current_folder_uuid = fileGet(14)
      data = fileGet(4).JsonParse()

      window.drop_location = input_path
      if data != current_folder_update or sorting_mode + sorting_direction != temp_sorting_mode (
        current_folder_update = data
        files = sort_files(data)
        
        temp_sorting_mode = sorting_mode + sorting_direction
      )
      rightclick ["New Folder Inside","New File","Edit Folder Contents","-","Info"] [].append(current_folder_uuid)
    ) else (
      files = []
    )
  )
  len = files.len
  if len > 0 (
    count = scroll_y // 45
    num = frame.height / 45
    
    if count + num > (len - 1) (
      num = len - count
    )
    
    w = frame.width - 20
    loop num (
      count ++
      draw_y = 16 + scroll_y - (45 * count)
      loc 999 2 0 draw_y
      current_file = files[count]
      if selected_files.contains(current_file) (
        square w 20 15 : c#global_accent
        square w 30 10 : c#prim
      ) else (
        square w 30 15 0 1
      )
      if mouse_touching and (file_dropped == 0 nor mouse_down) (
        file "open" file_dropped "onlyaccess"
        file "get" 3
        file "open" data ++ ".folder"
        new = file[4].delete(file_dropped).append(file_dropped)
        file "set" 4 new
        current_folder_update = new
        refresh
        file_dropped = 0
      )
      rightclick "file" selected_files
      
      // open the current file so that it can be handled for moving and rendering
      file "open" current_file "onlyaccess"
      
      if onclick and drag_id == 0 (
        // add or remove a single file from selection
        if "control".isKeyDown() (
          if selected_files.contains(current_file) (
            selected_files.delete(current_file)
          ) else (
            selected_files.append(current_file)
          )
        // multiselect between points
        ) else if "shift".isKeyDown() (
          temp = files.index(selected_files.last())
          if temp < count (
            temp ++
            selected_files += files.trim(temp,count)
          ) else (
            temp --
            selected_files ++= files.trim(count,temp)
          )
        // select a single file
          drag_id = 0
        ) else (
          selected_files = [].append(current_file)
          drag_id = current_file
          click_time = timestamp
          can = false
        )
      ) else if drag_id == current_file and selected_files.len == 1 (
        if mouse_touching.not() (
          drag_id = 0
          if mouse_down (
            file "move" current_file
          )
        ) else if clicked and can (
          drag_id = 0
          if fileGet(1) == ".folder" (
            navigate fileGet(3) ++ "/" ++ fileGet(2)
          ) else (
            file "start"
          )
          files_selected_id = 0
        )
      )
      loc 2 2 25 draw_y
      file "render" 1 : c#txtc
      c txtc
      change_x 30
      data2 = fileGet(2)
      max_chars = frame.width - (frame.width > 600 ? 500 330) / 9
      data = fileGet(10).toNum()
      local edited_time = timestamp - data < 172800000 ? data.timestamp("convert-relative") data.timestamp("convert-date")
      data = fileGet(1)
      if data == ".folder" (
        text data2.trimText(max_chars) 8
        
        if frame.width > 600 (
          loc -2 2 -400 draw_y
          text edited_time 8
        )
        
        loc -2 2 -250 draw_y
        text "Folder" 8
        
        loc -2 2 -100 draw_y
        text fileGet(4).len + "Items" 8
      ) else (
        data2 ++= data
        text data2.trimText(max_chars) 8
        
        if frame.width > 600 (
          loc -2 2 -400 draw_y
          text edited_time 8
        )
        
        loc -2 2 -250 draw_y
        data = file_types[data][2]
        text data ?? "Document" 8
        loc -2 2 -100 draw_y
        text formatFileSize(fileGet(12)) 8
      )
    )
  ) else (
    loc 999 2 -100 -20
    text "This folder is empty" 9 : c#txtc
  )
  frm_w = frame.width
  frame "clear"
  if input_path == (user_folder ++ "/bin") (
    loc -2 2 -75 -113
    square 120 20 10 : c#prim
    if onclick (
      each uuid files (
        file "open" uuid "onlyaccess"
        file "delete"
      )
      file "open" input_path ++ ".folder" "onlyaccess"
      file "set" 4 []
    )
    text "Empty Bin" 9 : c#txtc chx#-40
  )
  goto temp_x + 55 temp_y + 15
  sorting_option "Name"
  set_x temp_x2 - 115
  sorting_option "Size"
  set_x temp_x2 - 260
  sorting_option "Filetype"
  
  if frm_w > 600 (
    set_x temp_x2 - 410
    sorting_option "Modified"
  )
)
def saveFavorites() (
  save "favorites.json" "set" favorites
)

array default_favorites = [
  "user/desktop",
  "user/documents",
  "user/applications",
  "user/downloads",
  "user/bin"
]

array favorites = []

if "favorites.json".saveExists() (
  favorites = "favorites.json".saveGet()
) else (
  save "favorites.json" "set" default_favorites
  favorites = default_favorites
)

favorites.map(val -> (val.replace(".folder","").destr))

mainloop:
  window_tools:load_theme
  
  if tabs.len == 0 or typeof(tabs) != "array" (
    setup_tabs
  )
  if mouse_down.not() "can = true"
  w = window_width
  sideshow = w > 700
  if sideshow (
    c prim
    glass:frame window.left window.top - 50 window.left + 250 window.bottom
    c window_colour
    pen "opacity" 30
    icon "w 999 dot 0 0" 80
    frame "clear"
    loc 999 2 100 -70
  ) else (
    loc 999 2 20 -70
    w += 170
  )
  square w - 330 25 15 : c#prim
  input w - 350 25 "path" null 10 txtc
  if "enter".onKeyDown() and selected_input == "path" (
    navigate input_path
  )
  
  if sideshow.not() (
    loc 2 2 45 -70
    square 70 25 15 1 : c#prim
  )
  loc -2 2 -30 -70
  square 25 25 15 : c#prim
  icon "search" 0.8 : c#txtc
  
  loc 999 -2 0 12
  if sideshow (
    change_x 126
  ) else (
    w += 100
  )
  square w - 250 40 0 : c#prim
  if sideshow (
    pen "opacity" 0
    frame window.left window.top - 100 window.left + 260 window.bottom favorites.len * 35 + 180 "sidebar" (
      y = -30 + frame.scroll
      folder "Favorites"
      each fav favorites (
        file_folder fav "Favorites"
      )
    
      folder "Drives"
      file_folder "/(a) system" "Drives"
      file_folder "/(b) local" "Drives"
      file_folder "/(c) users/" ++ username "Drives"
    )
    goto window.left + 255 window.bottom + 15
    square 8 36 0 : c#prim
  )
  loc 2 2 20 -118
  if sideshow "change 250"
  icon "file" 0.7 : c#txtc
  if onclick (
    window "add" "New_File" input_path
  )
  icon "folder" 0.7 : chx#30
  if onclick (
    file "download" "new folder.folder" null null input_path
  )
  icon "w 3 line 0 -8 0 8" 0.7 : chx#20
  change -10
  if selected_files.len != 1 (
    files_buttons = []
  ) else (
    file_open = selected_files[1]
    file "open" file_open "onlyaccess"
    file "get" 13
    if "System" in data (
      files_buttons = ["Open","Copy","Info"]
    ) else (
      files_buttons = ["Open","Edit","Copy","Rename","Bin","Info"]
    )
    if selected_files.len == 1 (
      c txtc
      cur = ""
      for count files_buttons.len (
        icon files_buttons[count] 0.7 : chx#30 tooltip#files_buttons[count]
        if onclick (
          switch files_buttons[count] (
            case "open"
              file "start"
              break
            case "edit"
              window "add" "studio" file_open
              break
            case "copy"
              clipboard "set" file
              break
            case "rename"
              window "add" "Rename-Helper" file_open
              break
            case "info"
              window "add" "Files_Info" file_open
              break
            case "bin"
              file "move_to_bin"
              break
          )
          cur = ""
        )
        clicked = false
      )
    )
  )
  if window_width > 1000 and selected_files.len > 0 (
    loc -2 999 -147 -54
    square 270 window_height - 192 10 1 : c#prim
    if selected_files.len == 1 (
      loc -2 2 -150 -250
      file "open" file_open "onlyaccess"
      file "render" 5 : c#txtc
      loc -2 2 -280 -330 : c#txtc
      x = x_position
      file "get" 1
      data1 = data
      file "get" 2
      text data ++ data1 10
      set_x x
      text "File Info" 8.5 : chy#-35
      set_x x
      file "get" 9
      text "Created:" + data.timestamp("convert-relative") 8.5 : chy#-25
      set_x x
      file "get" 10
      text "Last Edited:" + data.timestamp("convert-relative") 8.5 : chy#-25
      set_x x
      file "get" 12
      text "Size:" + data + "Bytes" 8.5 : chy#-25
    )
  )
  file "open" input_path ++ ".folder" "onlyaccess"
  if sideshow "loc 2 -2 265 15" else "loc 2 -2 10 15"
  file "get" 4
  c txtc
  text `${files.len} items | ${selected_files.len} selected` 9
  
  render_tabs
  
  loc 2 2 25 -70
  cur_pos = tabs[current_tab].position
  square 25 25 10 0 1
  if cur_pos > 1 (
    c txtc
    if onclick (
      tabs[current_tab].position --
      refresh
    )
  ) else (
    c seco
  )
  icon "left-arrow" 0.8
  change_x 40
  
  square 25 25 10 0 1
  if cur_pos < tabs[current_tab].history.len (
    c txtc
    if onclick (
      tabs[current_tab].position ++
      refresh
    )
  ) else (
    c seco
  )
  icon "right-arrow" 0.8
  
  render_files
  
  if mouse_down.not() "can = true"
  import "win-buttons"